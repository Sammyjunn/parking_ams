#Making the path and global variables filenames
PATH = 'C:/Users/Sammy/Downloads/parkingdata'
filenames <- list.files(PATH, full.names=TRUE)
filenames2 <- list.files(PATH, full.names=FALSE)

#This function reads the data of a specific garage and returns it
startReading <- function(i){
  showConnections(all=TRUE)
  zz = gzfile(filenames[i], 'rt' )  
  dat = read.csv(zz,header=TRUE, sep = ';')
  check = colnames(dat)
  head(dat)
  check == colnames(dat)
  close(zz)
  length(filenames)
  dat['NameOfParkingSpace'] = filenames2[1]
  return (dat)
}

#This function makes it able to merge garages of liking, how to use is given underneath
readMultiple <- function(index){
  mergedData = list()
  for (i in index) {
    mergedData = rbind(mergedData, startReading(i))
  }
  return (mergedData)
}
readMultiple(c(1,2))


#This creates the data of garage 1
zz = gzfile(filenames[1], 'rt' )
df = read.csv(zz,header=TRUE, sep = ';')
close(zz)
df['NameOfParkingSpace'] = filenames2[1]
n = nrow(df)

#This merges all the other garages to garage 1
dataMerge <- function(){
  for (i in range(2:57)){
    zz = gzfile(filenames[i] )  
    dfi = read.csv(zz,header=TRUE, sep = ';')
    dfi['NameOfParkingSpace'] = filenames2[i]
    df = rbind(df,dfi)
    n=nrow(dfi) + n
  } 
  return(df)
}  
df = dataMerge() 

#This saves a desired dataframe into Excel, can be altered
inExcel <- function(dataFrame){
  write.csv(dataFrame, 'dataFrame.csv', row.names = TRUE)
}
inExcel(df)

#This functions shows all the error values, and a list of where they are
detectErrors <- function(dataFrame){
  errorindex = dataFrame[which(dataFrame$state == 'error'),]
  index = which(dataFrame$state == 'error')
  shortcapacity = dataFrame$shortcapacity
  states = dataFrame$state
  return (list(errorindex, index))
}
detectErrors(df)

#This functions gives the list of the "Okay rates"
okayRate <- function(){
  okayrrate = array(1:57)
  for (j in (1:57)){
    dfi = startReading(j)
    okayrrate[j] = nrow(dfi[which(dfi$state == 'ok'),])/nrow(dfi)
  }
  return (okayrrate)
}  
okayrate = okayRate()

#This functions gives the list of the "available rates"
availableRate <- function(){
  availablerate = array(1:57) 
  for (j in (1:57)){
    dfi = startReading(j)
    availablerate[j] = 1-(nrow(dfi[which(is.na(dfi$shortcapacity == TRUE)),])/nrow(dfi))
  }
  return(availablerate)
}  
availablerate = availableRate()

#This function needs to be run once, it gives the a list of the garages in the order of the garage with the "best" data
selectGarage <- function(){
  comparison = array(1:57)
  bestGarage = array(1:57)
  for (j in (1:57)){
    comparison[j] = (availablerate[j] + okayrate[j])
  }
  bestGarage = sort(comparison, decreasing = TRUE, index.return = TRUE)
  return (bestGarage)
}
selectgarage = selectGarage()

#This function needs to be run once, it gives the lengths of the garages in the order of the garage with the "best" data
lengthBest <- function(a){
  numberRows = array(1:57)
  for (i in (1:57)){
    numberRows[i] = nrow(startReading(a[i]))
    #numberRows[i] = nrow(startReading(a[i])[which(is.na(startReading(a[i])) == FALSE),])
  }
  return(numberRows)
}
lengthbest = lengthBest(selectGarage()$ix)

#This function gives us some basic statistics and the occupancy rate
descriptiveStatistics <- function(dataFrame){
  stat = summary(dataFrame$shortcapacity)
  st.err = sd(dataFrame$shortcapacity)
  dataFrame['occupancyRate'] = 1 - dataFrame$freespaceshort/dataFrame$shortcapacity
  occupancy = dataFrame['occupancyRate']
  return(list(stat, st.err, occupancy))
  #occupancy[1:50,] to make it shorty
}  
descriptiveStatistics(startReading(54))

#id = 900000003_parkinglocation for example
#This function can plot the freespaceshort
plotFunction <- function(id){
df[which(df$id == "id"),]
plot(ts(df[which(df$id == "id"),]$shortcapacity), ts(df[which(df$id == "id"),]$freespaceshort), gpars = list(col = c("black", "red")))
}

#install.packages(c("zoo", "dplyr"))
#need to install these packages as 1
library(zoo)
library(dplyr)
simpleNanSolver<-function(dfp){
  #removes the Nas at the head and replaces all other Nas for the last observation in the respective column   (the Last Observation Carried Forward)
  #inputs dataframe with data of 1 station
  drop <- c("longcapacity","freespacelong")
  dfp = dfp[,!(names(dfp) %in% drop)]
  dfp %>% 
    do(na.locf(.))
}
which(is.na(simpleNanSolver(startReading(54))))

#This function has a very long runtime, it inserts the value of the same minute k-weeks prior for the smallest k, or takes on the 
#value of the mean value of all the following weeks.
fillInMeans <- function(readfunction, r){
  a = readfunction(r)
  indexx = which(is.na(readfunction(r)$freespaceshort))
  for (i in indexx){
    relevantfreespaceshort = list()
    relevantshortcapacity = list()
    jmin = list()
    for (j in (1:104)){
      if (is.na(a$freespaceshort[i-(j*(7*24*60))]) = FALSE & i-(j*(7*24*60)) >= 0){
      jmin = append(jmin, j)
      a$shortcapacity[i] = a$shortcapacity[i-((min(unlist(jmin)))*(7*24*60))]
      a$freespaceshort[i] = a$freespaceshort[i-((min(unlist(jmin)))*(7*24*60))]
      }else{ 
        relevantfreespaceshort = append(relevantfreespaceshort, relevantfreespaceshort[i+(j*(7*24*60))])   
        relevantshortcapacity = append(relevantshortcapacity, relevantshortcapacity[i+(j*(7*24*60))])
      }
      a$shortcapacity[i] = mean(relevantshortcapacity)
      a$freespaceshort[i] = mean(relevantfreespaceshort)
    }
  } return(a)
}
  
#This function calculates the mean of all the values that have a value, and inserts this value in the data with NA values
fillInOverall <- function(dataframe){ 
  a = dataframe
  indexx = which(is.na(dataframe$freespaceshort))
  meanfreespaceshort = mean(dataframe$freespaceshort[which(is.na(dataframe$freespaceshort) == FALSE)])
  meanshortcapacity = mean(dataframe$shortcapacity[which(is.na(dataframe$shortcapacity) == FALSE)])
  for (i in indexx){
    a$freespaceshort[i] = meanfreespaceshort
    a$shortcapacity[i] = meanshortcapacity
  }
  return(a)
}
fillInOverall(startReading, 54)

#This function calculates the mean of all the values that are 'ok', and inserts this value in the data with state warning/error
fillInWarrors <- function(dataframe){ 
  a = dataframe
  indexx = which(a$state == 'warning' | a$state == 'error')
  meanfreespaceshort = mean(a$freespaceshort[which(a$state == 'ok')])
  meanshortcapacity = mean(a$shortcapacity[which(a$state == 'ok')])
  for (i in indexx){
    a$freespaceshort[i] = meanfreespaceshort
    a$shortcapacity[i] = meanshortcapacity
  }
  return(a)
}

#This function calculates the mean of all the values that are 'ok', and inserts this value in the data with state error
fillInErrors <- function(dataframe){ 
  a = dataframe
  indexx = which(a$state == 'error')
  meanfreespaceshort = mean(a$freespaceshort[which(a$state == 'ok')])
  meanshortcapacity = mean(a$shortcapacity[which(a$state == 'ok')])
  for (i in indexx){
    a$freespaceshort[i] = meanfreespaceshort
    a$shortcapacity[i] = meanshortcapacity
  }
  return(a)
}
fillInWarnings(fillInOverall(startReading(52)))

#This function calculates the mean of all the values that are 'ok', and inserts this value in the data with state warning
fillInWarnings <- function(dataframe){ 
  a = dataframe
  indexx = which(a$state == 'warning')
  meanfreespaceshort = mean(a$freespaceshort[which(a$state == 'ok')])
  meanshortcapacity = mean(a$shortcapacity[which(a$state == 'ok')])
  for (i in indexx){
    a$freespaceshort[i] = meanfreespaceshort
    a$shortcapacity[i] = meanshortcapacity
  }
  return(a)
}
